#!/usr/bin/env node

/**
 * Module dependencies.
 */

const app = require('../app');
const http = require('http');
const path = require('path');
const fs = require('fs');
const log4js = require('koa-log4');
const config = require('../config');

const appDir = path.resolve(__dirname, '..');
const logDir = path.join(appDir, 'logs');

/**
 * make a log directory, just in case it isn't there.
 */
try {
  fs.mkdirSync(logDir);
} catch (e) {
  if (e.code !== 'EEXIST') {
    console.error('Could not set up log directory, error was: ', e); // eslint-disable-line no-console
    process.exit(1);
  }
}
const env = config.get('server:env');


log4js.configure(path.join(appDir, `config/log4js.json`), { cwd: logDir });
const logger = log4js.getLogger('startup');

/**
 * Create HTTP server.
 */

const server = http.createServer(app.callback());

/**
 * Normalize a port into a number, string, or false.
 */

const normalizePort = (val) => {
  const port = parseInt(val, 10);

  if (isNaN(port)) { // eslint-disable-line no-restricted-globals
    // named pipe
    return val;
  }

  if (port >= 0) {
    return port;
  }

  return false;
};

/**
 * Get port from environment and store in Express.
 */
const port = normalizePort(process.env.PORT) || config.get('server:port') || '5000';


/**
 * Event listener for HTTP server "error" event.
 */

const onError = (error) => {
  if (error.syscall !== 'listen') {
    throw error;
  }

  const bind = typeof port === 'string'
    ? `Pipe ${port}`
    : `Port ${port}`;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      logger.error(`${bind} requires elevated privileges`);
      process.exit(1);
      break;
    case 'EADDRINUSE':
      logger.error(`${bind} is already in use`);
      process.exit(1);
      break;
    default:
      throw error;
  }
};

/**
 * Event listener for HTTP server "listening" event.
 */

const onListening = () => {
  const addr = server.address();
  const bind = typeof addr === 'string'
    ? `pipe ${addr}`
    : `port ${addr.port}`;
  logger.info(`Listening on ${bind}`);
};


/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);
